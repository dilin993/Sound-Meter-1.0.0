

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Mar 08 13:20:20 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16  0000                     
    17                           ; Version 1.41
    18                           ; Generated 25/01/2017 GMT
    19                           ; 
    20                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F2550 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     _ADRES	set	4035
    52  0000                     _LATBbits	set	3978
    53  0000                     _TRISBbits	set	3987
    54  0000                     _RCREG	set	4014
    55  0000                     _TXREG	set	4013
    56  0000                     _SPBRG	set	4015
    57  0000                     _ADCON0	set	4034
    58  0000                     _ADCON2	set	4032
    59  0000                     _RCIF	set	31989
    60  0000                     _TRMT	set	32097
    61  0000                     _TXEN	set	32101
    62  0000                     _CREN	set	32092
    63  0000                     _TRISC6	set	31910
    64  0000                     _TRISC7	set	31911
    65  0000                     _SPEN	set	32095
    66  0000                     _SYNC	set	32100
    67  0000                     _BRG16	set	32195
    68  0000                     _BRGH	set	32098
    69  0000                     _GODONE	set	32273
    70  0000                     _ADON	set	32272
    71                           
    72                           ; #config settings
    73  0000                     
    74                           	psect	cinit
    75  00794A                     __pcinit:
    76                           	opt stack 0
    77  00794A                     start_initialization:
    78                           	opt stack 0
    79  00794A                     __initialization:
    80                           	opt stack 0
    81                           
    82                           ; Clear objects allocated to COMRAM (43 bytes)
    83  00794A  EE00  F033         	lfsr	0,__pbssCOMRAM
    84  00794E  0E2B               	movlw	43
    85  007950                     clear_0:
    86  007950  6AEE               	clrf	postinc0,c
    87  007952  06E8               	decf	wreg,f,c
    88  007954  E1FD               	bnz	clear_0
    89  007956                     end_of_initialization:
    90                           	opt stack 0
    91  007956                     __end_of__initialization:
    92                           	opt stack 0
    93  007956  0100               	movlb	0
    94  007958  EF1B  F03E         	goto	_main	;jump to C main() function
    95                           postinc0	equ	0xFEE
    96                           wreg	equ	0xFE8
    97                           
    98                           	psect	bssCOMRAM
    99  000033                     __pbssCOMRAM:
   100                           	opt stack 0
   101  000033                     _sum:
   102                           	opt stack 0
   103  000033                     	ds	16
   104  000043                     _counters:
   105                           	opt stack 0
   106  000043                     	ds	8
   107  00004B                     _val:
   108                           	opt stack 0
   109  00004B                     	ds	8
   110  000053                     _datach:
   111                           	opt stack 0
   112  000053                     	ds	8
   113  00005B                     _gCounter:
   114                           	opt stack 0
   115  00005B                     	ds	2
   116  00005D                     _data:
   117                           	opt stack 0
   118  00005D                     	ds	1
   119                           postinc0	equ	0xFEE
   120                           wreg	equ	0xFE8
   121                           
   122                           	psect	cstackCOMRAM
   123  000001                     __pcstackCOMRAM:
   124                           	opt stack 0
   125  000001                     ?_ADCRead:
   126                           	opt stack 0
   127  000001                     ?___aldiv:
   128                           	opt stack 0
   129  000001                     UART_Write@data:
   130                           	opt stack 0
   131  000001                     ___aldiv@dividend:
   132                           	opt stack 0
   133                           
   134                           ; 4 bytes @ 0x0
   135  000001                     	ds	2
   136  000003                     ADCRead@ch:
   137                           	opt stack 0
   138                           
   139                           ; 1 bytes @ 0x2
   140  000003                     	ds	2
   141  000005                     ___aldiv@divisor:
   142                           	opt stack 0
   143                           
   144                           ; 4 bytes @ 0x4
   145  000005                     	ds	4
   146  000009                     ___aldiv@counter:
   147                           	opt stack 0
   148                           
   149                           ; 1 bytes @ 0x8
   150  000009                     	ds	1
   151  00000A                     ___aldiv@sign:
   152                           	opt stack 0
   153                           
   154                           ; 1 bytes @ 0x9
   155  00000A                     	ds	1
   156  00000B                     ___aldiv@quotient:
   157                           	opt stack 0
   158                           
   159                           ; 4 bytes @ 0xA
   160  00000B                     	ds	4
   161  00000F                     UART_Init@baudrate:
   162                           	opt stack 0
   163                           
   164                           ; 4 bytes @ 0xE
   165  00000F                     	ds	4
   166  000013                     ??_UART_Init:
   167                           
   168                           ; 1 bytes @ 0x12
   169  000013                     	ds	8
   170  00001B                     UART_Init@x:
   171                           	opt stack 0
   172                           
   173                           ; 2 bytes @ 0x1A
   174  00001B                     	ds	2
   175  00001D                     ??_main:
   176                           
   177                           ; 1 bytes @ 0x1C
   178  00001D                     	ds	18
   179  00002F                     main@i_172:
   180                           	opt stack 0
   181                           
   182                           ; 2 bytes @ 0x2E
   183  00002F                     	ds	2
   184  000031                     main@i:
   185                           	opt stack 0
   186                           
   187                           ; 2 bytes @ 0x30
   188  000031                     	ds	2
   189                           postinc0	equ	0xFEE
   190                           wreg	equ	0xFE8
   191                           
   192 ;;
   193 ;;Main: autosize = 0, tempsize = 18, incstack = 0, save=0
   194 ;;
   195 ;; *************** function _main *****************
   196 ;; Defined at:
   197 ;;		line 140 in file "main.c"
   198 ;; Parameters:    Size  Location     Type
   199 ;;		None
   200 ;; Auto vars:     Size  Location     Type
   201 ;;  i               2   48[COMRAM] int 
   202 ;;  i               2   46[COMRAM] int 
   203 ;; Return value:  Size  Location     Type
   204 ;;                  1    wreg      void 
   205 ;; Registers used:
   206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   207 ;; Tracked objects:
   208 ;;		On entry : 0/0
   209 ;;		On exit  : 0/0
   210 ;;		Unchanged: 0/0
   211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   212 ;;      Params:         0       0       0       0       0       0       0       0       0
   213 ;;      Locals:         4       0       0       0       0       0       0       0       0
   214 ;;      Temps:         18       0       0       0       0       0       0       0       0
   215 ;;      Totals:        22       0       0       0       0       0       0       0       0
   216 ;;Total ram usage:       22 bytes
   217 ;; Hardware stack levels required when called:    2
   218 ;; This function calls:
   219 ;;		_ADCInit
   220 ;;		_ADCRead
   221 ;;		_UART_Init
   222 ;;		_UART_Write
   223 ;;		___aldiv
   224 ;; This function is called by:
   225 ;;		Startup code after reset
   226 ;; This function uses a non-reentrant model
   227 ;;
   228                           
   229                           	psect	text0
   230  007C36                     __ptext0:
   231                           	opt stack 0
   232  007C36                     _main:
   233                           	opt stack 29
   234                           
   235                           ;main.c: 141: TRISBbits.RB0 = 0;
   236                           
   237                           ;incstack = 0
   238  007C36  9093               	bcf	3987,0,c	;volatile
   239                           
   240                           ;main.c: 142: UART_Init(9600);
   241  007C38  0E80               	movlw	128
   242  007C3A  6E0F               	movwf	UART_Init@baudrate,c
   243  007C3C  0E25               	movlw	37
   244  007C3E  6E10               	movwf	UART_Init@baudrate+1,c
   245  007C40  0E00               	movlw	0
   246  007C42  6E11               	movwf	UART_Init@baudrate+2,c
   247  007C44  0E00               	movlw	0
   248  007C46  6E12               	movwf	UART_Init@baudrate+3,c
   249  007C48  EC2D  F03D         	call	_UART_Init	;wreg free
   250                           
   251                           ;main.c: 143: ADCInit();
   252  007C4C  EC9C  F03C         	call	_ADCInit	;wreg free
   253  007C50                     l1018:
   254                           
   255                           ;main.c: 145: LATBbits.LB0 = 1;
   256  007C50  808A               	bsf	3978,0,c	;volatile
   257                           
   258                           ;main.c: 146: counters[0] = 0;
   259  007C52  0E00               	movlw	0
   260  007C54  6E44               	movwf	_counters+1,c
   261  007C56  0E00               	movlw	0
   262  007C58  6E43               	movwf	_counters,c
   263                           
   264                           ;main.c: 147: counters[1] = 0;
   265  007C5A  0E00               	movlw	0
   266  007C5C  6E46               	movwf	_counters+3,c
   267  007C5E  0E00               	movlw	0
   268  007C60  6E45               	movwf	_counters+2,c
   269                           
   270                           ;main.c: 148: counters[2] = 0;
   271  007C62  0E00               	movlw	0
   272  007C64  6E48               	movwf	_counters+5,c
   273  007C66  0E00               	movlw	0
   274  007C68  6E47               	movwf	_counters+4,c
   275                           
   276                           ;main.c: 149: counters[3] = 0;
   277  007C6A  0E00               	movlw	0
   278  007C6C  6E4A               	movwf	_counters+7,c
   279  007C6E  0E00               	movlw	0
   280  007C70  6E49               	movwf	_counters+6,c
   281                           
   282                           ;main.c: 150: gCounter = 0;
   283  007C72  0E00               	movlw	0
   284  007C74  6E5C               	movwf	_gCounter+1,c
   285  007C76  0E00               	movlw	0
   286  007C78  6E5B               	movwf	_gCounter,c
   287                           
   288                           ;main.c: 151: sum[0] = 0;
   289  007C7A  0E00               	movlw	0
   290  007C7C  6E33               	movwf	_sum,c
   291  007C7E  0E00               	movlw	0
   292  007C80  6E34               	movwf	_sum+1,c
   293  007C82  0E00               	movlw	0
   294  007C84  6E35               	movwf	_sum+2,c
   295  007C86  0E00               	movlw	0
   296  007C88  6E36               	movwf	_sum+3,c
   297                           
   298                           ;main.c: 152: sum[1] = 0;
   299  007C8A  0E00               	movlw	0
   300  007C8C  6E37               	movwf	_sum+4,c
   301  007C8E  0E00               	movlw	0
   302  007C90  6E38               	movwf	_sum+5,c
   303  007C92  0E00               	movlw	0
   304  007C94  6E39               	movwf	_sum+6,c
   305  007C96  0E00               	movlw	0
   306  007C98  6E3A               	movwf	_sum+7,c
   307                           
   308                           ;main.c: 153: sum[2] = 0;
   309  007C9A  0E00               	movlw	0
   310  007C9C  6E3B               	movwf	_sum+8,c
   311  007C9E  0E00               	movlw	0
   312  007CA0  6E3C               	movwf	_sum+9,c
   313  007CA2  0E00               	movlw	0
   314  007CA4  6E3D               	movwf	_sum+10,c
   315  007CA6  0E00               	movlw	0
   316  007CA8  6E3E               	movwf	_sum+11,c
   317                           
   318                           ;main.c: 154: sum[3] = 0;
   319  007CAA  0E00               	movlw	0
   320  007CAC  6E3F               	movwf	_sum+12,c
   321  007CAE  0E00               	movlw	0
   322  007CB0  6E40               	movwf	_sum+13,c
   323  007CB2  0E00               	movlw	0
   324  007CB4  6E41               	movwf	_sum+14,c
   325  007CB6  0E00               	movlw	0
   326  007CB8  6E42               	movwf	_sum+15,c
   327                           
   328                           ;main.c: 156: while(gCounter<150)
   329  007CBA  D0BE               	goto	l104
   330  007CBC                     l1038:
   331                           
   332                           ;main.c: 157: {
   333                           ;main.c: 158: val[0] = ADCRead(0);
   334  007CBC  0E00               	movlw	0
   335  007CBE  ECAE  F03C         	call	_ADCRead
   336  007CC2  C001  F04B         	movff	?_ADCRead,_val
   337  007CC6  C002  F04C         	movff	?_ADCRead+1,_val+1
   338                           
   339                           ;main.c: 159: val[1] = ADCRead(1);
   340  007CCA  0E01               	movlw	1
   341  007CCC  ECAE  F03C         	call	_ADCRead
   342  007CD0  C001  F04D         	movff	?_ADCRead,_val+2
   343  007CD4  C002  F04E         	movff	?_ADCRead+1,_val+3
   344                           
   345                           ;main.c: 160: val[2] = ADCRead(2);
   346  007CD8  0E02               	movlw	2
   347  007CDA  ECAE  F03C         	call	_ADCRead
   348  007CDE  C001  F04F         	movff	?_ADCRead,_val+4
   349  007CE2  C002  F050         	movff	?_ADCRead+1,_val+5
   350                           
   351                           ;main.c: 161: val[3] = ADCRead(3);
   352  007CE6  0E03               	movlw	3
   353  007CE8  ECAE  F03C         	call	_ADCRead
   354  007CEC  C001  F051         	movff	?_ADCRead,_val+6
   355  007CF0  C002  F052         	movff	?_ADCRead+1,_val+7
   356                           
   357                           ;main.c: 163: for(int i=0;i<4;i++)
   358  007CF4  0E00               	movlw	0
   359  007CF6  6E32               	movwf	main@i+1,c
   360  007CF8  0E00               	movlw	0
   361  007CFA  6E31               	movwf	main@i,c
   362  007CFC  BE32               	btfsc	main@i+1,7,c
   363  007CFE  D008               	goto	l1046
   364  007D00  5032               	movf	main@i+1,w,c
   365  007D02  E105               	bnz	u500
   366  007D04  0E04               	movlw	4
   367  007D06  5C31               	subwf	main@i,w,c
   368  007D08  B0D8               	btfsc	status,0,c
   369  007D0A  D08C               	goto	l1054
   370  007D0C  D001               	goto	l1046
   371  007D0E                     u500:
   372  007D0E  D08A               	goto	l1054
   373  007D10                     l1046:
   374                           
   375                           ;main.c: 164: {
   376                           ;main.c: 165: if(val[i]>10)
   377  007D10  90D8               	bcf	status,0,c
   378  007D12  3431               	rlcf	main@i,w,c
   379  007D14  6ED9               	movwf	fsr2l,c
   380  007D16  3432               	rlcf	main@i+1,w,c
   381  007D18  6EDA               	movwf	fsr2h,c
   382  007D1A  0E4B               	movlw	low _val
   383  007D1C  26D9               	addwf	fsr2l,f,c
   384  007D1E  0E00               	movlw	high _val
   385  007D20  22DA               	addwfc	fsr2h,f,c
   386  007D22  0E01               	movlw	1
   387  007D24  BEDB               	btfsc	plusw2,7,c
   388  007D26  D077               	goto	l1050
   389  007D28  0E01               	movlw	1
   390  007D2A  50DB               	movf	plusw2,w,c
   391  007D2C  E104               	bnz	u510
   392  007D2E  0E0B               	movlw	11
   393  007D30  5CDE               	subwf	postinc2,w,c
   394  007D32  A0D8               	btfss	status,0,c
   395  007D34  D070               	goto	l1050
   396  007D36                     u510:
   397                           
   398                           ;main.c: 166: {
   399                           ;main.c: 167: counters[i]=counters[i]+1;
   400  007D36  90D8               	bcf	status,0,c
   401  007D38  3431               	rlcf	main@i,w,c
   402  007D3A  6ED9               	movwf	fsr2l,c
   403  007D3C  3432               	rlcf	main@i+1,w,c
   404  007D3E  6EDA               	movwf	fsr2h,c
   405  007D40  0E43               	movlw	low _counters
   406  007D42  26D9               	addwf	fsr2l,f,c
   407  007D44  0E00               	movlw	high _counters
   408  007D46  22DA               	addwfc	fsr2h,f,c
   409  007D48  CFDE F01D          	movff	postinc2,??_main
   410  007D4C  CFDD F01E          	movff	postdec2,??_main+1
   411  007D50  0E01               	movlw	1
   412  007D52  261D               	addwf	??_main,f,c
   413  007D54  0E00               	movlw	0
   414  007D56  221E               	addwfc	??_main+1,f,c
   415  007D58  90D8               	bcf	status,0,c
   416  007D5A  3431               	rlcf	main@i,w,c
   417  007D5C  6ED9               	movwf	fsr2l,c
   418  007D5E  3432               	rlcf	main@i+1,w,c
   419  007D60  6EDA               	movwf	fsr2h,c
   420  007D62  0E43               	movlw	low _counters
   421  007D64  26D9               	addwf	fsr2l,f,c
   422  007D66  0E00               	movlw	high _counters
   423  007D68  22DA               	addwfc	fsr2h,f,c
   424  007D6A  C01D  FFDE         	movff	??_main,postinc2
   425  007D6E  C01E  FFDD         	movff	??_main+1,postdec2
   426                           
   427                           ;main.c: 168: sum[i] = sum[i] + val[i];
   428  007D72  0E33               	movlw	low _sum
   429  007D74  6E1D               	movwf	??_main& (0+255),c
   430  007D76  0E00               	movlw	high _sum
   431  007D78  6E1E               	movwf	(??_main+1)& (0+255),c
   432  007D7A  90D8               	bcf	status,0,c
   433  007D7C  3431               	rlcf	main@i,w,c
   434  007D7E  6ED9               	movwf	fsr2l,c
   435  007D80  3432               	rlcf	main@i+1,w,c
   436  007D82  6EDA               	movwf	fsr2h,c
   437  007D84  90D8               	bcf	status,0,c
   438  007D86  36D9               	rlcf	fsr2l,f,c
   439  007D88  36DA               	rlcf	fsr2h,f,c
   440  007D8A  501D               	movf	??_main,w,c
   441  007D8C  26D9               	addwf	fsr2l,f,c
   442  007D8E  501E               	movf	??_main+1,w,c
   443  007D90  22DA               	addwfc	fsr2h,f,c
   444  007D92  CFDE F01F          	movff	postinc2,??_main+2
   445  007D96  CFDE F020          	movff	postinc2,??_main+3
   446  007D9A  CFDE F021          	movff	postinc2,??_main+4
   447  007D9E  CFDE F022          	movff	postinc2,??_main+5
   448  007DA2  90D8               	bcf	status,0,c
   449  007DA4  3431               	rlcf	main@i,w,c
   450  007DA6  6ED9               	movwf	fsr2l,c
   451  007DA8  3432               	rlcf	main@i+1,w,c
   452  007DAA  6EDA               	movwf	fsr2h,c
   453  007DAC  0E4B               	movlw	low _val
   454  007DAE  26D9               	addwf	fsr2l,f,c
   455  007DB0  0E00               	movlw	high _val
   456  007DB2  22DA               	addwfc	fsr2h,f,c
   457  007DB4  CFDE F023          	movff	postinc2,??_main+6
   458  007DB8  CFDD F024          	movff	postdec2,??_main+7
   459  007DBC  C023  F025         	movff	??_main+6,??_main+8
   460  007DC0  C024  F026         	movff	??_main+7,??_main+9
   461  007DC4  0E00               	movlw	0
   462  007DC6  BE26               	btfsc	(??_main+9)& (0+255),7,c
   463  007DC8  0EFF               	movlw	255
   464  007DCA  6E27               	movwf	(??_main+10)& (0+255),c
   465  007DCC  6E28               	movwf	(??_main+11)& (0+255),c
   466  007DCE  501F               	movf	??_main+2,w,c
   467  007DD0  2425               	addwf	??_main+8,w,c
   468  007DD2  6E29               	movwf	(??_main+12)& (0+255),c
   469  007DD4  5020               	movf	??_main+3,w,c
   470  007DD6  2026               	addwfc	??_main+9,w,c
   471  007DD8  6E2A               	movwf	(??_main+13)& (0+255),c
   472  007DDA  5021               	movf	??_main+4,w,c
   473  007DDC  2027               	addwfc	??_main+10,w,c
   474  007DDE  6E2B               	movwf	(??_main+14)& (0+255),c
   475  007DE0  5022               	movf	??_main+5,w,c
   476  007DE2  2028               	addwfc	??_main+11,w,c
   477  007DE4  6E2C               	movwf	(??_main+15)& (0+255),c
   478  007DE6  0E33               	movlw	low _sum
   479  007DE8  6E2D               	movwf	(??_main+16)& (0+255),c
   480  007DEA  0E00               	movlw	high _sum
   481  007DEC  6E2E               	movwf	(??_main+17)& (0+255),c
   482  007DEE  90D8               	bcf	status,0,c
   483  007DF0  3431               	rlcf	main@i,w,c
   484  007DF2  6ED9               	movwf	fsr2l,c
   485  007DF4  3432               	rlcf	main@i+1,w,c
   486  007DF6  6EDA               	movwf	fsr2h,c
   487  007DF8  90D8               	bcf	status,0,c
   488  007DFA  36D9               	rlcf	fsr2l,f,c
   489  007DFC  36DA               	rlcf	fsr2h,f,c
   490  007DFE  502D               	movf	??_main+16,w,c
   491  007E00  26D9               	addwf	fsr2l,f,c
   492  007E02  502E               	movf	??_main+17,w,c
   493  007E04  22DA               	addwfc	fsr2h,f,c
   494  007E06  C029  FFDE         	movff	??_main+12,postinc2
   495  007E0A  C02A  FFDE         	movff	??_main+13,postinc2
   496  007E0E  C02B  FFDE         	movff	??_main+14,postinc2
   497  007E12  C02C  FFDE         	movff	??_main+15,postinc2
   498  007E16                     l1050:
   499  007E16  4A31               	infsnz	main@i,f,c
   500  007E18  2A32               	incf	main@i+1,f,c
   501  007E1A  BE32               	btfsc	main@i+1,7,c
   502  007E1C  D779               	goto	l1046
   503  007E1E  5032               	movf	main@i+1,w,c
   504  007E20  E101               	bnz	l1054
   505  007E22  D770               	goto	L1
   506  007E24                     l1054:
   507                           
   508                           ;main.c: 169: }
   509                           ;main.c: 170: }
   510                           ;main.c: 171: gCounter++;
   511  007E24  4A5B               	infsnz	_gCounter,f,c
   512  007E26  2A5C               	incf	_gCounter+1,f,c
   513                           
   514                           ;main.c: 172: _delay((unsigned long)((10)*(48000000/4000.0)));
   515  007E28  0E9C               	movlw	156
   516  007E2A  6E1D               	movwf	??_main& (0+255),c
   517  007E2C  0ED7               	movlw	215
   518  007E2E                     u617:
   519  007E2E  2EE8               	decfsz	wreg,f,c
   520  007E30  D7FE               	bra	u617
   521  007E32  2E1D               	decfsz	??_main& (0+255),f,c
   522  007E34  D7FC               	bra	u617
   523  007E36  F000               	nop	
   524  007E38                     l104:
   525  007E38  BE5C               	btfsc	_gCounter+1,7,c
   526  007E3A  D740               	goto	l1038
   527  007E3C  505C               	movf	_gCounter+1,w,c
   528  007E3E  E104               	bnz	l1058
   529  007E40  0E96               	movlw	150
   530  007E42  5C5B               	subwf	_gCounter,w,c
   531  007E44  A0D8               	btfss	status,0,c
   532  007E46  D73A               	goto	l1038
   533  007E48                     l1058:
   534                           
   535                           ;main.c: 173: }
   536                           ;main.c: 175: for(int i=0;i<4;i++)
   537  007E48  0E00               	movlw	0
   538  007E4A  6E30               	movwf	main@i_172+1,c
   539  007E4C  0E00               	movlw	0
   540  007E4E  6E2F               	movwf	main@i_172,c
   541  007E50                     l1060:
   542  007E50  BE30               	btfsc	main@i_172+1,7,c
   543  007E52  D006               	goto	l1064
   544  007E54  5030               	movf	main@i_172+1,w,c
   545  007E56  E161               	bnz	l1074
   546  007E58  0E04               	movlw	4
   547  007E5A  5C2F               	subwf	main@i_172,w,c
   548  007E5C  B0D8               	btfsc	status,0,c
   549  007E5E  D05D               	goto	l1074
   550  007E60                     l1064:
   551                           
   552                           ;main.c: 176: {
   553                           ;main.c: 177: if(counters[i]>20)
   554  007E60  90D8               	bcf	status,0,c
   555  007E62  342F               	rlcf	main@i_172,w,c
   556  007E64  6ED9               	movwf	fsr2l,c
   557  007E66  3430               	rlcf	main@i_172+1,w,c
   558  007E68  6EDA               	movwf	fsr2h,c
   559  007E6A  0E43               	movlw	low _counters
   560  007E6C  26D9               	addwf	fsr2l,f,c
   561  007E6E  0E00               	movlw	high _counters
   562  007E70  22DA               	addwfc	fsr2h,f,c
   563  007E72  0E01               	movlw	1
   564  007E74  BEDB               	btfsc	plusw2,7,c
   565  007E76  D041               	goto	l1068
   566  007E78  0E01               	movlw	1
   567  007E7A  50DB               	movf	plusw2,w,c
   568  007E7C  E104               	bnz	u550
   569  007E7E  0E15               	movlw	21
   570  007E80  5CDE               	subwf	postinc2,w,c
   571  007E82  A0D8               	btfss	status,0,c
   572  007E84  D03A               	goto	l1068
   573  007E86                     u550:
   574                           
   575                           ;main.c: 178: datach[i] = sum[i]/counters[i];
   576  007E86  0E33               	movlw	low _sum
   577  007E88  6E1D               	movwf	??_main& (0+255),c
   578  007E8A  0E00               	movlw	high _sum
   579  007E8C  6E1E               	movwf	(??_main+1)& (0+255),c
   580  007E8E  90D8               	bcf	status,0,c
   581  007E90  342F               	rlcf	main@i_172,w,c
   582  007E92  6ED9               	movwf	fsr2l,c
   583  007E94  3430               	rlcf	main@i_172+1,w,c
   584  007E96  6EDA               	movwf	fsr2h,c
   585  007E98  90D8               	bcf	status,0,c
   586  007E9A  36D9               	rlcf	fsr2l,f,c
   587  007E9C  36DA               	rlcf	fsr2h,f,c
   588  007E9E  501D               	movf	??_main,w,c
   589  007EA0  26D9               	addwf	fsr2l,f,c
   590  007EA2  501E               	movf	??_main+1,w,c
   591  007EA4  22DA               	addwfc	fsr2h,f,c
   592  007EA6  CFDE F001          	movff	postinc2,___aldiv@dividend
   593  007EAA  CFDE F002          	movff	postinc2,___aldiv@dividend+1
   594  007EAE  CFDE F003          	movff	postinc2,___aldiv@dividend+2
   595  007EB2  CFDE F004          	movff	postinc2,___aldiv@dividend+3
   596  007EB6  90D8               	bcf	status,0,c
   597  007EB8  342F               	rlcf	main@i_172,w,c
   598  007EBA  6ED9               	movwf	fsr2l,c
   599  007EBC  3430               	rlcf	main@i_172+1,w,c
   600  007EBE  6EDA               	movwf	fsr2h,c
   601  007EC0  0E43               	movlw	low _counters
   602  007EC2  26D9               	addwf	fsr2l,f,c
   603  007EC4  0E00               	movlw	high _counters
   604  007EC6  22DA               	addwfc	fsr2h,f,c
   605  007EC8  CFDE F005          	movff	postinc2,___aldiv@divisor
   606  007ECC  CFDD F006          	movff	postdec2,___aldiv@divisor+1
   607  007ED0  0E00               	movlw	0
   608  007ED2  BE06               	btfsc	___aldiv@divisor+1,7,c
   609  007ED4  0EFF               	movlw	-1
   610  007ED6  6E07               	movwf	___aldiv@divisor+2,c
   611  007ED8  6E08               	movwf	___aldiv@divisor+3,c
   612  007EDA  ECC7  F03C         	call	___aldiv	;wreg free
   613  007EDE  90D8               	bcf	status,0,c
   614  007EE0  342F               	rlcf	main@i_172,w,c
   615  007EE2  6ED9               	movwf	fsr2l,c
   616  007EE4  3430               	rlcf	main@i_172+1,w,c
   617  007EE6  6EDA               	movwf	fsr2h,c
   618  007EE8  0E53               	movlw	low _datach
   619  007EEA  26D9               	addwf	fsr2l,f,c
   620  007EEC  0E00               	movlw	high _datach
   621  007EEE  22DA               	addwfc	fsr2h,f,c
   622  007EF0  C001  FFDE         	movff	?___aldiv,postinc2
   623  007EF4  C002  FFDD         	movff	?___aldiv+1,postdec2
   624  007EF8  D00D               	goto	l1070
   625  007EFA                     l1068:
   626                           
   627                           ;main.c: 179: else
   628                           ;main.c: 180: datach[i] = 0;
   629  007EFA  90D8               	bcf	status,0,c
   630  007EFC  342F               	rlcf	main@i_172,w,c
   631  007EFE  6ED9               	movwf	fsr2l,c
   632  007F00  3430               	rlcf	main@i_172+1,w,c
   633  007F02  6EDA               	movwf	fsr2h,c
   634  007F04  0E53               	movlw	low _datach
   635  007F06  26D9               	addwf	fsr2l,f,c
   636  007F08  0E00               	movlw	high _datach
   637  007F0A  22DA               	addwfc	fsr2h,f,c
   638  007F0C  0E00               	movlw	0
   639  007F0E  6EDE               	movwf	postinc2,c
   640  007F10  0E00               	movlw	0
   641  007F12  6EDD               	movwf	postdec2,c
   642  007F14                     l1070:
   643  007F14  4A2F               	infsnz	main@i_172,f,c
   644  007F16  2A30               	incf	main@i_172+1,f,c
   645  007F18  D79B               	goto	l1060
   646  007F1A                     l1074:
   647                           
   648                           ;main.c: 181: }
   649                           ;main.c: 184: data = datach[0] & 31;
   650  007F1A  5053               	movf	_datach,w,c
   651  007F1C  0B1F               	andlw	31
   652  007F1E  6E5D               	movwf	_data,c
   653                           
   654                           ;main.c: 185: UART_Write(data);
   655  007F20  505D               	movf	_data,w,c
   656  007F22  EC9F  F03C         	call	_UART_Write
   657                           
   658                           ;main.c: 187: data = (datach[0]>>5)|128;
   659  007F26  C053  F01D         	movff	_datach,??_main
   660  007F2A  C054  F01E         	movff	_datach+1,??_main+1
   661  007F2E  0E05               	movlw	5
   662  007F30  6E1F               	movwf	(??_main+2)& (0+255),c
   663  007F32                     u575:
   664  007F32  341E               	rlcf	??_main+1,w,c
   665  007F34  321E               	rrcf	??_main+1,f,c
   666  007F36  321D               	rrcf	??_main,f,c
   667  007F38  2E1F               	decfsz	(??_main+2)& (0+255),f,c
   668  007F3A  D7FB               	goto	u575
   669  007F3C  501D               	movf	??_main,w,c
   670  007F3E  0980               	iorlw	128
   671  007F40  6E5D               	movwf	_data,c
   672                           
   673                           ;main.c: 188: UART_Write(data);
   674  007F42  505D               	movf	_data,w,c
   675  007F44  EC9F  F03C         	call	_UART_Write
   676                           
   677                           ;main.c: 191: data = (datach[1] & 31)|32;
   678  007F48  5055               	movf	_datach+2,w,c
   679  007F4A  0B1F               	andlw	31
   680  007F4C  0920               	iorlw	32
   681  007F4E  6E5D               	movwf	_data,c
   682                           
   683                           ;main.c: 192: UART_Write(data);
   684  007F50  505D               	movf	_data,w,c
   685  007F52  EC9F  F03C         	call	_UART_Write
   686                           
   687                           ;main.c: 194: data = (datach[1]>>5)|160;
   688  007F56  EE20  F055         	lfsr	2,_datach+2
   689  007F5A  CFDE F01D          	movff	postinc2,??_main
   690  007F5E  CFDD F01E          	movff	postdec2,??_main+1
   691  007F62  0E05               	movlw	5
   692  007F64  6E1F               	movwf	(??_main+2)& (0+255),c
   693  007F66                     u585:
   694  007F66  341E               	rlcf	??_main+1,w,c
   695  007F68  321E               	rrcf	??_main+1,f,c
   696  007F6A  321D               	rrcf	??_main,f,c
   697  007F6C  2E1F               	decfsz	(??_main+2)& (0+255),f,c
   698  007F6E  D7FB               	goto	u585
   699  007F70  501D               	movf	??_main,w,c
   700  007F72  09A0               	iorlw	160
   701  007F74  6E5D               	movwf	_data,c
   702                           
   703                           ;main.c: 195: UART_Write(data);
   704  007F76  505D               	movf	_data,w,c
   705  007F78  EC9F  F03C         	call	_UART_Write
   706                           
   707                           ;main.c: 198: data = (datach[2] & 31)|64;
   708  007F7C  5057               	movf	_datach+4,w,c
   709  007F7E  0B1F               	andlw	31
   710  007F80  0940               	iorlw	64
   711  007F82  6E5D               	movwf	_data,c
   712                           
   713                           ;main.c: 199: UART_Write(data);
   714  007F84  505D               	movf	_data,w,c
   715  007F86  EC9F  F03C         	call	_UART_Write
   716                           
   717                           ;main.c: 201: data = (datach[2]>>5)|193;
   718  007F8A  EE20  F057         	lfsr	2,_datach+4
   719  007F8E  CFDE F01D          	movff	postinc2,??_main
   720  007F92  CFDD F01E          	movff	postdec2,??_main+1
   721  007F96  0E05               	movlw	5
   722  007F98  6E1F               	movwf	(??_main+2)& (0+255),c
   723  007F9A                     u595:
   724  007F9A  341E               	rlcf	??_main+1,w,c
   725  007F9C  321E               	rrcf	??_main+1,f,c
   726  007F9E  321D               	rrcf	??_main,f,c
   727  007FA0  2E1F               	decfsz	(??_main+2)& (0+255),f,c
   728  007FA2  D7FB               	goto	u595
   729  007FA4  501D               	movf	??_main,w,c
   730  007FA6  09C1               	iorlw	193
   731  007FA8  6E5D               	movwf	_data,c
   732                           
   733                           ;main.c: 202: UART_Write(data);
   734  007FAA  505D               	movf	_data,w,c
   735  007FAC  EC9F  F03C         	call	_UART_Write
   736                           
   737                           ;main.c: 205: data = (datach[3] & 31)|96;
   738  007FB0  5059               	movf	_datach+6,w,c
   739  007FB2  0B1F               	andlw	31
   740  007FB4  0960               	iorlw	96
   741  007FB6  6E5D               	movwf	_data,c
   742                           
   743                           ;main.c: 206: UART_Write(data);
   744  007FB8  505D               	movf	_data,w,c
   745  007FBA  EC9F  F03C         	call	_UART_Write
   746                           
   747                           ;main.c: 208: data = (datach[3]>>5)|224;
   748  007FBE  EE20  F059         	lfsr	2,_datach+6
   749  007FC2  CFDE F01D          	movff	postinc2,??_main
   750  007FC6  CFDD F01E          	movff	postdec2,??_main+1
   751  007FCA  0E05               	movlw	5
   752  007FCC  6E1F               	movwf	(??_main+2)& (0+255),c
   753  007FCE                     u605:
   754  007FCE  341E               	rlcf	??_main+1,w,c
   755  007FD0  321E               	rrcf	??_main+1,f,c
   756  007FD2  321D               	rrcf	??_main,f,c
   757  007FD4  2E1F               	decfsz	(??_main+2)& (0+255),f,c
   758  007FD6  D7FB               	goto	u605
   759  007FD8  501D               	movf	??_main,w,c
   760  007FDA  09E0               	iorlw	224
   761  007FDC  6E5D               	movwf	_data,c
   762                           
   763                           ;main.c: 209: UART_Write(data);
   764  007FDE  505D               	movf	_data,w,c
   765  007FE0  EC9F  F03C         	call	_UART_Write
   766                           
   767                           ;main.c: 211: LATBbits.LB0 = 0;
   768  007FE4  908A               	bcf	3978,0,c	;volatile
   769                           
   770                           ;main.c: 212: _delay((unsigned long)((100)*(48000000/4000.0)));
   771  007FE6  0E07               	movlw	7
   772  007FE8  6E1E               	movwf	(??_main+1)& (0+255),c
   773  007FEA  0E17               	movlw	23
   774  007FEC  6E1D               	movwf	??_main& (0+255),c
   775  007FEE  0E6A               	movlw	106
   776  007FF0                     u627:
   777  007FF0  2EE8               	decfsz	wreg,f,c
   778  007FF2  D7FE               	bra	u627
   779  007FF4  2E1D               	decfsz	??_main& (0+255),f,c
   780  007FF6  D7FC               	bra	u627
   781  007FF8  2E1E               	decfsz	(??_main+1)& (0+255),f,c
   782  007FFA  D7FA               	bra	u627
   783  007FFC  D000               	nop2	
   784  007FFE  D628               	goto	l1018
   785  008000                     __end_of_main:
   786                           	opt stack 0
   787                           postinc0	equ	0xFEE
   788                           wreg	equ	0xFE8
   789                           postinc2	equ	0xFDE
   790                           postdec2	equ	0xFDD
   791                           plusw2	equ	0xFDB
   792                           fsr2h	equ	0xFDA
   793                           fsr2l	equ	0xFD9
   794                           status	equ	0xFD8
   795                           
   796 ;; *************** function _UART_Write *****************
   797 ;; Defined at:
   798 ;;		line 104 in file "main.c"
   799 ;; Parameters:    Size  Location     Type
   800 ;;  data            1    wreg     unsigned char 
   801 ;; Auto vars:     Size  Location     Type
   802 ;;  data            1    0[COMRAM] unsigned char 
   803 ;; Return value:  Size  Location     Type
   804 ;;                  1    wreg      void 
   805 ;; Registers used:
   806 ;;		wreg
   807 ;; Tracked objects:
   808 ;;		On entry : 0/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   812 ;;      Params:         0       0       0       0       0       0       0       0       0
   813 ;;      Locals:         1       0       0       0       0       0       0       0       0
   814 ;;      Temps:          0       0       0       0       0       0       0       0       0
   815 ;;      Totals:         1       0       0       0       0       0       0       0       0
   816 ;;Total ram usage:        1 bytes
   817 ;; Hardware stack levels used:    1
   818 ;; This function calls:
   819 ;;		Nothing
   820 ;; This function is called by:
   821 ;;		_main
   822 ;;		_UART_Write_Text
   823 ;; This function uses a non-reentrant model
   824 ;;
   825                           
   826                           	psect	text1
   827  00793E                     __ptext1:
   828                           	opt stack 0
   829  00793E                     _UART_Write:
   830                           	opt stack 30
   831                           
   832                           ;incstack = 0
   833                           ;UART_Write@data stored from wreg
   834  00793E  6E01               	movwf	UART_Write@data,c
   835  007940                     l73:
   836  007940  A2AC               	btfss	4012,1,c	;volatile
   837  007942  D7FE               	goto	l73
   838                           
   839                           ;main.c: 107: TXREG = data;
   840  007944  C001  FFAD         	movff	UART_Write@data,4013	;volatile
   841  007948  0012               	return		;funcret
   842  00794A                     __end_of_UART_Write:
   843                           	opt stack 0
   844                           postinc0	equ	0xFEE
   845                           wreg	equ	0xFE8
   846                           postinc2	equ	0xFDE
   847                           postdec2	equ	0xFDD
   848                           plusw2	equ	0xFDB
   849                           fsr2h	equ	0xFDA
   850                           fsr2l	equ	0xFD9
   851                           status	equ	0xFD8
   852                           
   853 ;; *************** function _UART_Init *****************
   854 ;; Defined at:
   855 ;;		line 74 in file "main.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;  baudrate        4   14[COMRAM] const long 
   858 ;; Auto vars:     Size  Location     Type
   859 ;;  x               2   26[COMRAM] unsigned int 
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      unsigned char 
   862 ;; Registers used:
   863 ;;		wreg, status,2, status,0, cstack
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   869 ;;      Params:         4       0       0       0       0       0       0       0       0
   870 ;;      Locals:         2       0       0       0       0       0       0       0       0
   871 ;;      Temps:          8       0       0       0       0       0       0       0       0
   872 ;;      Totals:        14       0       0       0       0       0       0       0       0
   873 ;;Total ram usage:       14 bytes
   874 ;; Hardware stack levels used:    1
   875 ;; Hardware stack levels required when called:    1
   876 ;; This function calls:
   877 ;;		___aldiv
   878 ;; This function is called by:
   879 ;;		_main
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883                           	psect	text2
   884  007A5A                     __ptext2:
   885                           	opt stack 0
   886  007A5A                     _UART_Init:
   887                           	opt stack 29
   888                           
   889                           ;main.c: 76: unsigned int x;
   890                           ;main.c: 77: x = (48000000 - baudrate*64)/(baudrate*64);
   891                           
   892                           ;incstack = 0
   893  007A5A  C00F  F013         	movff	UART_Init@baudrate,??_UART_Init
   894  007A5E  C010  F014         	movff	UART_Init@baudrate+1,??_UART_Init+1
   895  007A62  C011  F015         	movff	UART_Init@baudrate+2,??_UART_Init+2
   896  007A66  C012  F016         	movff	UART_Init@baudrate+3,??_UART_Init+3
   897  007A6A  0E06               	movlw	6
   898  007A6C                     u415:
   899  007A6C  90D8               	bcf	status,0,c
   900  007A6E  3613               	rlcf	??_UART_Init,f,c
   901  007A70  3614               	rlcf	??_UART_Init+1,f,c
   902  007A72  3615               	rlcf	??_UART_Init+2,f,c
   903  007A74  3616               	rlcf	??_UART_Init+3,f,c
   904  007A76  2EE8               	decfsz	wreg,f,c
   905  007A78  D7F9               	goto	u415
   906  007A7A  1E13               	comf	??_UART_Init,f,c
   907  007A7C  1E14               	comf	??_UART_Init+1,f,c
   908  007A7E  1E15               	comf	??_UART_Init+2,f,c
   909  007A80  1E16               	comf	??_UART_Init+3,f,c
   910  007A82  2A13               	incf	??_UART_Init,f,c
   911  007A84  0E00               	movlw	0
   912  007A86  2214               	addwfc	??_UART_Init+1,f,c
   913  007A88  2215               	addwfc	??_UART_Init+2,f,c
   914  007A8A  2216               	addwfc	??_UART_Init+3,f,c
   915  007A8C  0E00               	movlw	0
   916  007A8E  2413               	addwf	??_UART_Init,w,c
   917  007A90  6E01               	movwf	___aldiv@dividend,c
   918  007A92  0E6C               	movlw	108
   919  007A94  2014               	addwfc	??_UART_Init+1,w,c
   920  007A96  6E02               	movwf	___aldiv@dividend+1,c
   921  007A98  0EDC               	movlw	220
   922  007A9A  2015               	addwfc	??_UART_Init+2,w,c
   923  007A9C  6E03               	movwf	___aldiv@dividend+2,c
   924  007A9E  0E02               	movlw	2
   925  007AA0  2016               	addwfc	??_UART_Init+3,w,c
   926  007AA2  6E04               	movwf	___aldiv@dividend+3,c
   927  007AA4  C00F  F017         	movff	UART_Init@baudrate,??_UART_Init+4
   928  007AA8  C010  F018         	movff	UART_Init@baudrate+1,??_UART_Init+5
   929  007AAC  C011  F019         	movff	UART_Init@baudrate+2,??_UART_Init+6
   930  007AB0  C012  F01A         	movff	UART_Init@baudrate+3,??_UART_Init+7
   931  007AB4  0E06               	movlw	6
   932  007AB6                     u425:
   933  007AB6  90D8               	bcf	status,0,c
   934  007AB8  3617               	rlcf	??_UART_Init+4,f,c
   935  007ABA  3618               	rlcf	??_UART_Init+5,f,c
   936  007ABC  3619               	rlcf	??_UART_Init+6,f,c
   937  007ABE  361A               	rlcf	??_UART_Init+7,f,c
   938  007AC0  2EE8               	decfsz	wreg,f,c
   939  007AC2  D7F9               	goto	u425
   940  007AC4  C017  F005         	movff	??_UART_Init+4,___aldiv@divisor
   941  007AC8  C018  F006         	movff	??_UART_Init+5,___aldiv@divisor+1
   942  007ACC  C019  F007         	movff	??_UART_Init+6,___aldiv@divisor+2
   943  007AD0  C01A  F008         	movff	??_UART_Init+7,___aldiv@divisor+3
   944  007AD4  ECC7  F03C         	call	___aldiv	;wreg free
   945  007AD8  C001  F01B         	movff	?___aldiv,UART_Init@x
   946  007ADC  C002  F01C         	movff	?___aldiv+1,UART_Init@x+1
   947                           
   948                           ;main.c: 78: if(baudrate>=115200)
   949  007AE0  BE12               	btfsc	UART_Init@baudrate+3,7,c
   950  007AE2  D04C               	goto	l1000
   951  007AE4  5012               	movf	UART_Init@baudrate+3,w,c
   952  007AE6  E106               	bnz	u430
   953  007AE8  0EC2               	movlw	194
   954  007AEA  5C10               	subwf	UART_Init@baudrate+1,w,c
   955  007AEC  0E01               	movlw	1
   956  007AEE  5811               	subwfb	UART_Init@baudrate+2,w,c
   957  007AF0  A0D8               	btfss	status,0,c
   958  007AF2  D044               	goto	l1000
   959  007AF4                     u430:
   960                           
   961                           ;main.c: 79: {
   962                           ;main.c: 80: x = (48000000 - baudrate*16)/(baudrate*16);
   963  007AF4  C00F  F013         	movff	UART_Init@baudrate,??_UART_Init
   964  007AF8  C010  F014         	movff	UART_Init@baudrate+1,??_UART_Init+1
   965  007AFC  C011  F015         	movff	UART_Init@baudrate+2,??_UART_Init+2
   966  007B00  C012  F016         	movff	UART_Init@baudrate+3,??_UART_Init+3
   967  007B04  0E04               	movlw	4
   968  007B06                     u445:
   969  007B06  90D8               	bcf	status,0,c
   970  007B08  3613               	rlcf	??_UART_Init,f,c
   971  007B0A  3614               	rlcf	??_UART_Init+1,f,c
   972  007B0C  3615               	rlcf	??_UART_Init+2,f,c
   973  007B0E  3616               	rlcf	??_UART_Init+3,f,c
   974  007B10  2EE8               	decfsz	wreg,f,c
   975  007B12  D7F9               	goto	u445
   976  007B14  1E13               	comf	??_UART_Init,f,c
   977  007B16  1E14               	comf	??_UART_Init+1,f,c
   978  007B18  1E15               	comf	??_UART_Init+2,f,c
   979  007B1A  1E16               	comf	??_UART_Init+3,f,c
   980  007B1C  2A13               	incf	??_UART_Init,f,c
   981  007B1E  0E00               	movlw	0
   982  007B20  2214               	addwfc	??_UART_Init+1,f,c
   983  007B22  2215               	addwfc	??_UART_Init+2,f,c
   984  007B24  2216               	addwfc	??_UART_Init+3,f,c
   985  007B26  0E00               	movlw	0
   986  007B28  2413               	addwf	??_UART_Init,w,c
   987  007B2A  6E01               	movwf	___aldiv@dividend,c
   988  007B2C  0E6C               	movlw	108
   989  007B2E  2014               	addwfc	??_UART_Init+1,w,c
   990  007B30  6E02               	movwf	___aldiv@dividend+1,c
   991  007B32  0EDC               	movlw	220
   992  007B34  2015               	addwfc	??_UART_Init+2,w,c
   993  007B36  6E03               	movwf	___aldiv@dividend+2,c
   994  007B38  0E02               	movlw	2
   995  007B3A  2016               	addwfc	??_UART_Init+3,w,c
   996  007B3C  6E04               	movwf	___aldiv@dividend+3,c
   997  007B3E  C00F  F017         	movff	UART_Init@baudrate,??_UART_Init+4
   998  007B42  C010  F018         	movff	UART_Init@baudrate+1,??_UART_Init+5
   999  007B46  C011  F019         	movff	UART_Init@baudrate+2,??_UART_Init+6
  1000  007B4A  C012  F01A         	movff	UART_Init@baudrate+3,??_UART_Init+7
  1001  007B4E  0E04               	movlw	4
  1002  007B50                     u455:
  1003  007B50  90D8               	bcf	status,0,c
  1004  007B52  3617               	rlcf	??_UART_Init+4,f,c
  1005  007B54  3618               	rlcf	??_UART_Init+5,f,c
  1006  007B56  3619               	rlcf	??_UART_Init+6,f,c
  1007  007B58  361A               	rlcf	??_UART_Init+7,f,c
  1008  007B5A  2EE8               	decfsz	wreg,f,c
  1009  007B5C  D7F9               	goto	u455
  1010  007B5E  C017  F005         	movff	??_UART_Init+4,___aldiv@divisor
  1011  007B62  C018  F006         	movff	??_UART_Init+5,___aldiv@divisor+1
  1012  007B66  C019  F007         	movff	??_UART_Init+6,___aldiv@divisor+2
  1013  007B6A  C01A  F008         	movff	??_UART_Init+7,___aldiv@divisor+3
  1014  007B6E  ECC7  F03C         	call	___aldiv	;wreg free
  1015  007B72  C001  F01B         	movff	?___aldiv,UART_Init@x
  1016  007B76  C002  F01C         	movff	?___aldiv+1,UART_Init@x+1
  1017                           
  1018                           ;main.c: 81: BRGH = 1;
  1019  007B7A  84AC               	bsf	4012,2,c	;volatile
  1020  007B7C                     l1000:
  1021                           
  1022                           ;main.c: 83: }
  1023                           ;main.c: 84: if(baudrate>=200000)
  1024  007B7C  BE12               	btfsc	UART_Init@baudrate+3,7,c
  1025  007B7E  D04F               	goto	l1008
  1026  007B80  5012               	movf	UART_Init@baudrate+3,w,c
  1027  007B82  E108               	bnz	u460
  1028  007B84  0E40               	movlw	64
  1029  007B86  5C0F               	subwf	UART_Init@baudrate,w,c
  1030  007B88  0E0D               	movlw	13
  1031  007B8A  5810               	subwfb	UART_Init@baudrate+1,w,c
  1032  007B8C  0E03               	movlw	3
  1033  007B8E  5811               	subwfb	UART_Init@baudrate+2,w,c
  1034  007B90  A0D8               	btfss	status,0,c
  1035  007B92  D045               	goto	l1008
  1036  007B94                     u460:
  1037                           
  1038                           ;main.c: 85: {
  1039                           ;main.c: 86: x = (48000000 - baudrate*4)/(baudrate*4);
  1040  007B94  C00F  F013         	movff	UART_Init@baudrate,??_UART_Init
  1041  007B98  C010  F014         	movff	UART_Init@baudrate+1,??_UART_Init+1
  1042  007B9C  C011  F015         	movff	UART_Init@baudrate+2,??_UART_Init+2
  1043  007BA0  C012  F016         	movff	UART_Init@baudrate+3,??_UART_Init+3
  1044  007BA4  0E02               	movlw	2
  1045  007BA6                     u475:
  1046  007BA6  90D8               	bcf	status,0,c
  1047  007BA8  3613               	rlcf	??_UART_Init,f,c
  1048  007BAA  3614               	rlcf	??_UART_Init+1,f,c
  1049  007BAC  3615               	rlcf	??_UART_Init+2,f,c
  1050  007BAE  3616               	rlcf	??_UART_Init+3,f,c
  1051  007BB0  2EE8               	decfsz	wreg,f,c
  1052  007BB2  D7F9               	goto	u475
  1053  007BB4  1E13               	comf	??_UART_Init,f,c
  1054  007BB6  1E14               	comf	??_UART_Init+1,f,c
  1055  007BB8  1E15               	comf	??_UART_Init+2,f,c
  1056  007BBA  1E16               	comf	??_UART_Init+3,f,c
  1057  007BBC  2A13               	incf	??_UART_Init,f,c
  1058  007BBE  0E00               	movlw	0
  1059  007BC0  2214               	addwfc	??_UART_Init+1,f,c
  1060  007BC2  2215               	addwfc	??_UART_Init+2,f,c
  1061  007BC4  2216               	addwfc	??_UART_Init+3,f,c
  1062  007BC6  0E00               	movlw	0
  1063  007BC8  2413               	addwf	??_UART_Init,w,c
  1064  007BCA  6E01               	movwf	___aldiv@dividend,c
  1065  007BCC  0E6C               	movlw	108
  1066  007BCE  2014               	addwfc	??_UART_Init+1,w,c
  1067  007BD0  6E02               	movwf	___aldiv@dividend+1,c
  1068  007BD2  0EDC               	movlw	220
  1069  007BD4  2015               	addwfc	??_UART_Init+2,w,c
  1070  007BD6  6E03               	movwf	___aldiv@dividend+2,c
  1071  007BD8  0E02               	movlw	2
  1072  007BDA  2016               	addwfc	??_UART_Init+3,w,c
  1073  007BDC  6E04               	movwf	___aldiv@dividend+3,c
  1074  007BDE  C00F  F017         	movff	UART_Init@baudrate,??_UART_Init+4
  1075  007BE2  C010  F018         	movff	UART_Init@baudrate+1,??_UART_Init+5
  1076  007BE6  C011  F019         	movff	UART_Init@baudrate+2,??_UART_Init+6
  1077  007BEA  C012  F01A         	movff	UART_Init@baudrate+3,??_UART_Init+7
  1078  007BEE  0E02               	movlw	2
  1079  007BF0                     u485:
  1080  007BF0  90D8               	bcf	status,0,c
  1081  007BF2  3617               	rlcf	??_UART_Init+4,f,c
  1082  007BF4  3618               	rlcf	??_UART_Init+5,f,c
  1083  007BF6  3619               	rlcf	??_UART_Init+6,f,c
  1084  007BF8  361A               	rlcf	??_UART_Init+7,f,c
  1085  007BFA  2EE8               	decfsz	wreg,f,c
  1086  007BFC  D7F9               	goto	u485
  1087  007BFE  C017  F005         	movff	??_UART_Init+4,___aldiv@divisor
  1088  007C02  C018  F006         	movff	??_UART_Init+5,___aldiv@divisor+1
  1089  007C06  C019  F007         	movff	??_UART_Init+6,___aldiv@divisor+2
  1090  007C0A  C01A  F008         	movff	??_UART_Init+7,___aldiv@divisor+3
  1091  007C0E  ECC7  F03C         	call	___aldiv	;wreg free
  1092  007C12  C001  F01B         	movff	?___aldiv,UART_Init@x
  1093  007C16  C002  F01C         	movff	?___aldiv+1,UART_Init@x+1
  1094                           
  1095                           ;main.c: 87: BRGH = 1;
  1096  007C1A  84AC               	bsf	4012,2,c	;volatile
  1097                           
  1098                           ;main.c: 88: BRG16 = 1;
  1099  007C1C  86B8               	bsf	4024,3,c	;volatile
  1100  007C1E                     l1008:
  1101                           
  1102                           ;main.c: 89: }
  1103                           ;main.c: 90: if(x<256)
  1104  007C1E  041C               	decf	UART_Init@x+1,w,c
  1105  007C20  B0D8               	btfsc	status,0,c
  1106  007C22  0012               	return	
  1107                           
  1108                           ;main.c: 91: {
  1109                           ;main.c: 92: SPBRG = x;
  1110  007C24  C01B  FFAF         	movff	UART_Init@x,4015	;volatile
  1111                           
  1112                           ;main.c: 93: SYNC = 0;
  1113  007C28  98AC               	bcf	4012,4,c	;volatile
  1114                           
  1115                           ;main.c: 94: SPEN = 1;
  1116  007C2A  8EAB               	bsf	4011,7,c	;volatile
  1117                           
  1118                           ;main.c: 95: TRISC7 = 1;
  1119  007C2C  8E94               	bsf	3988,7,c	;volatile
  1120                           
  1121                           ;main.c: 96: TRISC6 = 1;
  1122  007C2E  8C94               	bsf	3988,6,c	;volatile
  1123                           
  1124                           ;main.c: 97: CREN = 1;
  1125  007C30  88AB               	bsf	4011,4,c	;volatile
  1126                           
  1127                           ;main.c: 98: TXEN = 1;
  1128  007C32  8AAC               	bsf	4012,5,c	;volatile
  1129                           
  1130                           ;main.c: 99: return 1;
  1131                           ;	Return value of _UART_Init is never used
  1132  007C34  0012               	return	
  1133  007C36                     __end_of_UART_Init:
  1134                           	opt stack 0
  1135                           postinc0	equ	0xFEE
  1136                           wreg	equ	0xFE8
  1137                           postinc2	equ	0xFDE
  1138                           postdec2	equ	0xFDD
  1139                           plusw2	equ	0xFDB
  1140                           fsr2h	equ	0xFDA
  1141                           fsr2l	equ	0xFD9
  1142                           status	equ	0xFD8
  1143                           
  1144 ;; *************** function ___aldiv *****************
  1145 ;; Defined at:
  1146 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;  dividend        4    0[COMRAM] long 
  1149 ;;  divisor         4    4[COMRAM] long 
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;  quotient        4   10[COMRAM] long 
  1152 ;;  sign            1    9[COMRAM] unsigned char 
  1153 ;;  counter         1    8[COMRAM] unsigned char 
  1154 ;; Return value:  Size  Location     Type
  1155 ;;                  4    0[COMRAM] long 
  1156 ;; Registers used:
  1157 ;;		wreg, status,2, status,0
  1158 ;; Tracked objects:
  1159 ;;		On entry : 0/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1163 ;;      Params:         8       0       0       0       0       0       0       0       0
  1164 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1165 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1166 ;;      Totals:        14       0       0       0       0       0       0       0       0
  1167 ;;Total ram usage:       14 bytes
  1168 ;; Hardware stack levels used:    1
  1169 ;; This function calls:
  1170 ;;		Nothing
  1171 ;; This function is called by:
  1172 ;;		_UART_Init
  1173 ;;		_main
  1174 ;; This function uses a non-reentrant model
  1175 ;;
  1176                           
  1177                           	psect	text3
  1178  00798E                     __ptext3:
  1179                           	opt stack 0
  1180  00798E                     ___aldiv:
  1181                           	opt stack 30
  1182                           
  1183                           ;incstack = 0
  1184  00798E  0E00               	movlw	0
  1185  007990  6E0A               	movwf	___aldiv@sign,c
  1186  007992  AE08               	btfss	___aldiv@divisor+3,7,c
  1187  007994  D00A               	goto	l942
  1188  007996  1E08               	comf	___aldiv@divisor+3,f,c
  1189  007998  1E07               	comf	___aldiv@divisor+2,f,c
  1190  00799A  1E06               	comf	___aldiv@divisor+1,f,c
  1191  00799C  6C05               	negf	___aldiv@divisor,c
  1192  00799E  0E00               	movlw	0
  1193  0079A0  2206               	addwfc	___aldiv@divisor+1,f,c
  1194  0079A2  2207               	addwfc	___aldiv@divisor+2,f,c
  1195  0079A4  2208               	addwfc	___aldiv@divisor+3,f,c
  1196  0079A6  0E01               	movlw	1
  1197  0079A8  6E0A               	movwf	___aldiv@sign,c
  1198  0079AA                     l942:
  1199  0079AA  AE04               	btfss	___aldiv@dividend+3,7,c
  1200  0079AC  D00A               	goto	l948
  1201  0079AE  1E04               	comf	___aldiv@dividend+3,f,c
  1202  0079B0  1E03               	comf	___aldiv@dividend+2,f,c
  1203  0079B2  1E02               	comf	___aldiv@dividend+1,f,c
  1204  0079B4  6C01               	negf	___aldiv@dividend,c
  1205  0079B6  0E00               	movlw	0
  1206  0079B8  2202               	addwfc	___aldiv@dividend+1,f,c
  1207  0079BA  2203               	addwfc	___aldiv@dividend+2,f,c
  1208  0079BC  2204               	addwfc	___aldiv@dividend+3,f,c
  1209  0079BE  0E01               	movlw	1
  1210  0079C0  1A0A               	xorwf	___aldiv@sign,f,c
  1211  0079C2                     l948:
  1212  0079C2  0E00               	movlw	0
  1213  0079C4  6E0B               	movwf	___aldiv@quotient,c
  1214  0079C6  0E00               	movlw	0
  1215  0079C8  6E0C               	movwf	___aldiv@quotient+1,c
  1216  0079CA  0E00               	movlw	0
  1217  0079CC  6E0D               	movwf	___aldiv@quotient+2,c
  1218  0079CE  0E00               	movlw	0
  1219  0079D0  6E0E               	movwf	___aldiv@quotient+3,c
  1220  0079D2  5005               	movf	___aldiv@divisor,w,c
  1221  0079D4  1006               	iorwf	___aldiv@divisor+1,w,c
  1222  0079D6  1007               	iorwf	___aldiv@divisor+2,w,c
  1223  0079D8  1008               	iorwf	___aldiv@divisor+3,w,c
  1224  0079DA  B4D8               	btfsc	status,2,c
  1225  0079DC  D02A               	goto	l970
  1226  0079DE  0E01               	movlw	1
  1227  0079E0  6E09               	movwf	___aldiv@counter,c
  1228  0079E2  D006               	goto	l956
  1229  0079E4                     l954:
  1230  0079E4  90D8               	bcf	status,0,c
  1231  0079E6  3605               	rlcf	___aldiv@divisor,f,c
  1232  0079E8  3606               	rlcf	___aldiv@divisor+1,f,c
  1233  0079EA  3607               	rlcf	___aldiv@divisor+2,f,c
  1234  0079EC  3608               	rlcf	___aldiv@divisor+3,f,c
  1235  0079EE  2A09               	incf	___aldiv@counter,f,c
  1236  0079F0                     l956:
  1237  0079F0  AE08               	btfss	___aldiv@divisor+3,7,c
  1238  0079F2  D7F8               	goto	l954
  1239  0079F4                     l958:
  1240  0079F4  90D8               	bcf	status,0,c
  1241  0079F6  360B               	rlcf	___aldiv@quotient,f,c
  1242  0079F8  360C               	rlcf	___aldiv@quotient+1,f,c
  1243  0079FA  360D               	rlcf	___aldiv@quotient+2,f,c
  1244  0079FC  360E               	rlcf	___aldiv@quotient+3,f,c
  1245  0079FE  5005               	movf	___aldiv@divisor,w,c
  1246  007A00  5C01               	subwf	___aldiv@dividend,w,c
  1247  007A02  5006               	movf	___aldiv@divisor+1,w,c
  1248  007A04  5802               	subwfb	___aldiv@dividend+1,w,c
  1249  007A06  5007               	movf	___aldiv@divisor+2,w,c
  1250  007A08  5803               	subwfb	___aldiv@dividend+2,w,c
  1251  007A0A  5008               	movf	___aldiv@divisor+3,w,c
  1252  007A0C  5804               	subwfb	___aldiv@dividend+3,w,c
  1253  007A0E  A0D8               	btfss	status,0,c
  1254  007A10  D009               	goto	l966
  1255  007A12  5005               	movf	___aldiv@divisor,w,c
  1256  007A14  5E01               	subwf	___aldiv@dividend,f,c
  1257  007A16  5006               	movf	___aldiv@divisor+1,w,c
  1258  007A18  5A02               	subwfb	___aldiv@dividend+1,f,c
  1259  007A1A  5007               	movf	___aldiv@divisor+2,w,c
  1260  007A1C  5A03               	subwfb	___aldiv@dividend+2,f,c
  1261  007A1E  5008               	movf	___aldiv@divisor+3,w,c
  1262  007A20  5A04               	subwfb	___aldiv@dividend+3,f,c
  1263  007A22  800B               	bsf	___aldiv@quotient,0,c
  1264  007A24                     l966:
  1265  007A24  90D8               	bcf	status,0,c
  1266  007A26  3208               	rrcf	___aldiv@divisor+3,f,c
  1267  007A28  3207               	rrcf	___aldiv@divisor+2,f,c
  1268  007A2A  3206               	rrcf	___aldiv@divisor+1,f,c
  1269  007A2C  3205               	rrcf	___aldiv@divisor,f,c
  1270  007A2E  2E09               	decfsz	___aldiv@counter,f,c
  1271  007A30  D7E1               	goto	l958
  1272  007A32                     l970:
  1273  007A32  500A               	movf	___aldiv@sign,w,c
  1274  007A34  B4D8               	btfsc	status,2,c
  1275  007A36  D008               	goto	l974
  1276  007A38  1E0E               	comf	___aldiv@quotient+3,f,c
  1277  007A3A  1E0D               	comf	___aldiv@quotient+2,f,c
  1278  007A3C  1E0C               	comf	___aldiv@quotient+1,f,c
  1279  007A3E  6C0B               	negf	___aldiv@quotient,c
  1280  007A40  0E00               	movlw	0
  1281  007A42  220C               	addwfc	___aldiv@quotient+1,f,c
  1282  007A44  220D               	addwfc	___aldiv@quotient+2,f,c
  1283  007A46  220E               	addwfc	___aldiv@quotient+3,f,c
  1284  007A48                     l974:
  1285  007A48  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  1286  007A4C  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  1287  007A50  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  1288  007A54  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  1289  007A58  0012               	return	
  1290  007A5A                     __end_of___aldiv:
  1291                           	opt stack 0
  1292                           postinc0	equ	0xFEE
  1293                           wreg	equ	0xFE8
  1294                           postinc2	equ	0xFDE
  1295                           postdec2	equ	0xFDD
  1296                           plusw2	equ	0xFDB
  1297                           fsr2h	equ	0xFDA
  1298                           fsr2l	equ	0xFD9
  1299                           status	equ	0xFD8
  1300                           
  1301 ;; *************** function _ADCRead *****************
  1302 ;; Defined at:
  1303 ;;		line 55 in file "main.c"
  1304 ;; Parameters:    Size  Location     Type
  1305 ;;  ch              1    wreg     unsigned char 
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;  ch              1    2[COMRAM] unsigned char 
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  2    0[COMRAM] unsigned int 
  1310 ;; Registers used:
  1311 ;;		wreg, status,2, status,0
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1317 ;;      Params:         2       0       0       0       0       0       0       0       0
  1318 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1319 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1320 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1321 ;;Total ram usage:        3 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; This function calls:
  1324 ;;		Nothing
  1325 ;; This function is called by:
  1326 ;;		_main
  1327 ;; This function uses a non-reentrant model
  1328 ;;
  1329                           
  1330                           	psect	text4
  1331  00795C                     __ptext4:
  1332                           	opt stack 0
  1333  00795C                     _ADCRead:
  1334                           	opt stack 30
  1335                           
  1336                           ;incstack = 0
  1337                           ;ADCRead@ch stored from wreg
  1338  00795C  6E03               	movwf	ADCRead@ch,c
  1339                           
  1340                           ;main.c: 57: if(ch>13) return 0;
  1341  00795E  0E0D               	movlw	13
  1342  007960  6403               	cpfsgt	ADCRead@ch,c
  1343  007962  D005               	goto	l984
  1344  007964  0E00               	movlw	0
  1345  007966  6E02               	movwf	?_ADCRead+1,c
  1346  007968  0E00               	movlw	0
  1347  00796A  6E01               	movwf	?_ADCRead,c
  1348  00796C  0012               	return	
  1349  00796E                     l984:
  1350                           
  1351                           ;main.c: 59: ADCON0=0x00;
  1352  00796E  0E00               	movlw	0
  1353  007970  6EC2               	movwf	4034,c	;volatile
  1354                           
  1355                           ;main.c: 61: ADCON0=(ch<<2);
  1356  007972  4403               	rlncf	ADCRead@ch,w,c
  1357  007974  46E8               	rlncf	wreg,f,c
  1358  007976  0BFC               	andlw	252
  1359  007978  6EC2               	movwf	4034,c	;volatile
  1360                           
  1361                           ;main.c: 63: ADON=1;
  1362  00797A  80C2               	bsf	4034,0,c	;volatile
  1363                           
  1364                           ;main.c: 65: GODONE=1;
  1365  00797C  82C2               	bsf	4034,1,c	;volatile
  1366  00797E                     l62:
  1367  00797E  B2C2               	btfsc	4034,1,c	;volatile
  1368  007980  D7FE               	goto	l62
  1369                           
  1370                           ;main.c: 69: ADON=0;
  1371  007982  90C2               	bcf	4034,0,c	;volatile
  1372                           
  1373                           ;main.c: 71: return ADRES;
  1374  007984  CFC3 F001          	movff	4035,?_ADCRead	;volatile
  1375  007988  CFC4 F002          	movff	4036,?_ADCRead+1	;volatile
  1376  00798C  0012               	return		;funcret
  1377  00798E                     __end_of_ADCRead:
  1378                           	opt stack 0
  1379                           postinc0	equ	0xFEE
  1380                           wreg	equ	0xFE8
  1381                           postinc2	equ	0xFDE
  1382                           postdec2	equ	0xFDD
  1383                           plusw2	equ	0xFDB
  1384                           fsr2h	equ	0xFDA
  1385                           fsr2l	equ	0xFD9
  1386                           status	equ	0xFD8
  1387                           
  1388 ;; *************** function _ADCInit *****************
  1389 ;; Defined at:
  1390 ;;		line 31 in file "main.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;		None
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;		None
  1395 ;; Return value:  Size  Location     Type
  1396 ;;                  1    wreg      void 
  1397 ;; Registers used:
  1398 ;;		wreg, status,2
  1399 ;; Tracked objects:
  1400 ;;		On entry : 0/0
  1401 ;;		On exit  : 0/0
  1402 ;;		Unchanged: 0/0
  1403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1404 ;;      Params:         0       0       0       0       0       0       0       0       0
  1405 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1406 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1407 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1408 ;;Total ram usage:        0 bytes
  1409 ;; Hardware stack levels used:    1
  1410 ;; This function calls:
  1411 ;;		Nothing
  1412 ;; This function is called by:
  1413 ;;		_main
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417                           	psect	text5
  1418  007938                     __ptext5:
  1419                           	opt stack 0
  1420  007938                     _ADCInit:
  1421                           	opt stack 30
  1422                           
  1423                           ;main.c: 51: ADCON2=0b10001010;
  1424                           
  1425                           ;incstack = 0
  1426  007938  0E8A               	movlw	138
  1427  00793A  6EC0               	movwf	4032,c	;volatile
  1428  00793C  0012               	return		;funcret
  1429  00793E                     __end_of_ADCInit:
  1430                           	opt stack 0
  1431  0000                     postinc0	equ	0xFEE
  1432                           wreg	equ	0xFE8
  1433                           postinc2	equ	0xFDE
  1434                           postdec2	equ	0xFDD
  1435                           plusw2	equ	0xFDB
  1436                           fsr2h	equ	0xFDA
  1437                           fsr2l	equ	0xFD9
  1438                           status	equ	0xFD8
  1439                           postinc0	equ	0xFEE
  1440                           wreg	equ	0xFE8
  1441                           postinc2	equ	0xFDE
  1442                           postdec2	equ	0xFDD
  1443                           plusw2	equ	0xFDB
  1444                           fsr2h	equ	0xFDA
  1445                           fsr2l	equ	0xFD9
  1446                           status	equ	0xFD8
  1447                           
  1448                           	psect	rparam
  1449  0000                     postinc0	equ	0xFEE
  1450                           wreg	equ	0xFE8
  1451                           postinc2	equ	0xFDE
  1452                           postdec2	equ	0xFDD
  1453                           plusw2	equ	0xFDB
  1454                           fsr2h	equ	0xFDA
  1455                           fsr2l	equ	0xFD9
  1456                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         43
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     50      93
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0    2304
                                             28 COMRAM    22    22      0
                            _ADCInit
                            _ADCRead
                          _UART_Init
                         _UART_Write
                            ___aldiv
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           14    10      4    1099
                                             14 COMRAM    14    10      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     812
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _ADCRead                                              3     1      2      44
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _ADCRead
   _UART_Init
     ___aldiv
   _UART_Write
   ___aldiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     32      5D       1       97.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5D      20        0.0%
DATA                 0      0      5D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Mar 08 13:20:20 2017

                     l62 797E                       l73 7940                      l104 7E38  
                    l942 79AA                      l954 79E4                      l970 7A32  
                    l956 79F0                      l948 79C2                      l974 7A48  
                    l966 7A24                      l958 79F4                      l984 796E  
                    u500 7D0E                      u430 7AF4                      u510 7D36  
                    u415 7A6C                      u425 7AB6                      u460 7B94  
                    u445 7B06                      u605 7FCE                      u550 7E86  
                    u455 7B50                      u617 7E2E                      u475 7BA6  
                    u627 7FF0                      u485 7BF0                      u575 7F32  
                    u585 7F66                      u595 7F9A             __CFG_BOR$OFF 000000  
                    _val 004B                      _sum 0033          __end_of_ADCInit 793E  
        __end_of_ADCRead 798E                      wreg 000FE8             __CFG_LVP$OFF 000000  
           __CFG_WDT$OFF 000000                     l1000 7B7C                     l1008 7C1E  
                   l1050 7E16                     l1018 7C50                     l1060 7E50  
                   l1070 7F14                     l1054 7E24                     l1046 7D10  
                   l1038 7CBC                     l1064 7E60                     l1074 7F1A  
                   l1058 7E48                     l1068 7EFA                     _ADON 007E10  
                   _BRGH 007D62                     _CREN 007D5C                     _RCIF 007CF5  
                   _SPEN 007D5F                     _TRMT 007D61                     _TXEN 007D65  
                   _SYNC 007D64             __CFG_PWRT$ON 000000                     _data 005D  
                   _main 7C36                     fsr2h 000FDA                     fsr2l 000FD9  
                   start 0000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
          __CFG_PLLDIV$4 000000          __end_of___aldiv 7A5A                    ?_main 0001  
                  _ADRES 000FC3                    _BRG16 007DC3                    _RCREG 000FAE  
                  _SPBRG 000FAF                    _TXREG 000FAD              ?_UART_Write 0001  
     __size_of_UART_Init 01DC                    main@i 0031                    plusw2 000FDB  
                  status 000FD8          __initialization 794A             __end_of_main 8000  
              ??_ADCInit 0001                ??_ADCRead 0003                   ??_main 001D  
          __activetblptr 000000                ADCRead@ch 0003                   _ADCON0 000FC2  
                 _ADCON2 000FC0                   _GODONE 007E11                   _TRISC6 007CA6  
                 _TRISC7 007CA7        __end_of_UART_Init 7C36      __size_of_UART_Write 000C  
              ??___aldiv 0009                   _datach 0053                   clear_0 7950  
             __accesstop 0060  __end_of__initialization 7956          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0001                  _ADCInit 7938  
                _ADCRead 795C             ??_UART_Write 0001                  __Hparam 0000  
                __Lparam 0000                  ___aldiv 798E       __end_of_UART_Write 794A  
                __pcinit 794A                  __ramtop 0800                  __ptext0 7C36  
                __ptext1 793E                  __ptext2 7A5A                  __ptext3 798E  
                __ptext4 795C                  __ptext5 7938         ___aldiv@dividend 0001  
   end_of_initialization 7956         ___aldiv@quotient 000B                  postdec2 000FDD  
                postinc0 000FEE                  postinc2 000FDE                _UART_Init 7A5A  
         UART_Write@data 0001                _TRISBbits 000F93               ?_UART_Init 000F  
    start_initialization 794A                 ?_ADCInit 0001                 ?_ADCRead 0001  
            __pbssCOMRAM 0033                 ?___aldiv 0001              ??_UART_Init 0013  
             UART_Init@x 001B          ___aldiv@divisor 0005          ___aldiv@counter 0009  
               _LATBbits 000F8A        UART_Init@baudrate 000F         __size_of_ADCInit 0006  
       __size_of_ADCRead 0032                main@i_172 002F                 __Hrparam 0000  
               __Lrparam 0000                 _gCounter 005B         __size_of___aldiv 00CC  
               _counters 0043            __size_of_main 03CA    __CFG_CPUDIV$OSC1_PLL2 000000  
           ___aldiv@sign 000A               _UART_Write 793E       __CFG_FOSC$HSPLL_HS 000000  
